strontiumw3<-strontiumw2[sort('STATION_ID'),]
strontiumw3<-strontiumw2[sort(strontiumw2$STATION_ID),]
rstudio::viewData(strontiumw3)
strontiumw3<-strontiumw2[order(strontiumw2$STATION_ID),]
rstudio::viewData(strontiumw3)
names(iodinel2)
names(strontiuml2)
names(cesium137l2)
names(technetiuml2)
names(wl)
names(thicknessUAZ)
names(thicknessUAZ)[11]
thvn
ov
names(thicknessUAZ)[ov]
names(thicknessUAZ)[ov+3]
names(thicknessUAZ)[ov+11]
names(thicknessUAZ)[ov+3+3*4]
names(thicknessUAZ)[ov+3+5*4]
names(thicknessUAZ)[ov+4+5*4]
names(iodinel2)
names(iodinel2)[1]
int(names(iodinel2)[1])
names(iodinel2)[1]*2
as.numeric(names(iodinel2)[1])*2
as.numeric(names(iodinel2)[1])
as.numeric(names(iodinel2)[1])-1988
indexlagI<-ov+(minyearI-1988)*4
minyearI<-as.numeric(names(iodinel2)[1])
indexlagI<-ov+(minyearI-1988)*4
indexlagI
minyearSr<-as.numeric(names(strontiuml2)[1])
indexlagSr<-ov+(minyearSr-1988)*4
indexlagSr
minyearCs<-as.numeric(names(cesium137l2)[1])
indexlagCs<-ov+(minyearSr-1988)*4
minyearCs
iodine<-readRDS("../SRS_data/iodine.rdata")
strontium<-readRDS("../SRS_data/strontium.rdata")
cesium137<-readRDS("../SRS_data/cesium137.rdata")
technetium<-readRDS("../SRS_data/technetium.rdata")
iodinel<-split(iodine,iodine$MYEAR)
strontiuml<-split(strontium,strontium$MYEAR)
cesium137l<-split(cesium137,cesium137$MYEAR)
technetiuml<-split(technetium,technetium$MYEAR)
#Select 1993 and after no data in 1991 and 1992
iodinel2<-iodinel[3:length(iodinel)]
#Select after 1993
strontiuml2<-strontiuml[4:length(strontiuml)]
#After 1989
cesium137l2<-cesium137l[5:length(cesium137l)]
#Data after 1993
technetiuml2<-technetiuml[3:length(technetiuml)]
# tritiumCl2<-tritiumCl[3:length(tritiumCl)]
names(iodinel2)
names(strontiuml2)
names(cesium137l2)
names(technetiuml2)
Iinventory<-thicknessUAZ
Srinventory<-thicknessUAZ
Csinventory<-thicknessUAZ
thvn<-dim(thicknessUAZ)[2]
dimpredgrid<-dim(testgrid1)
nbnegIvals<-vector(mode = "integer", length = length(iodinel2));
nbNAIvals<-vector(mode = "integer", length = length(iodinel2));
nbnegSrvals<-vector(mode = "integer", length = length(strontiuml2));
nbNASrvals<-vector(mode = "integer", length = length(strontiuml2));
nbnegCsvals<-vector(mode = "integer", length = length(cesium137l2));
nbNACsvals<-vector(mode = "integer", length = length(cesium137l2));
nbparamT1<-4
minyearI<-as.numeric(names(iodinel2)[1])
indexlagI<-ov+(minyearI-1988)*4
names(thicknessUAZ)[11]
for (kkI in 1:length(iodinel2)) {
I.loess<-loess(mean~EASTING+NORTHING, data=iodinel2[[kkI]],degree=1,span=alphaloessconc)
predI<-predict(I.loess,newdata = testgrid1 ,se = TRUE)
#The prediction is given as a matrix, convert to vector
dimpredictions<-dim(predI$fit)
fullfit<-as.vector(predI$fit)
#Remove negative values as we will just consider them NULL
nbnegIvals[kkI]<-sum(fullfit<0, na.rm=TRUE)
fullfit[fullfit<0]<-NA
nbNAIvals[kkI]<-sum(is.na(fullfit))
#fullfit[fullfit<0]<-0
#Store in Tyear
Iinventory[nbparamT1*(kkI-1)+thvn+1]<-fullfit
names(Iinventory)[nbparamT1*(kkI-1)+thvn+1]<-paste0("I",names(iodinel2)[kkI])
Iinventory[nbparamT1*(kkI-1)+thvn+2]<-as.vector(predI$se.fit)
names(Iinventory)[nbparamT1*(kkI-1)+thvn+2]<-paste0("se.I",names(iodinel2)[kkI])
# Compute C*e
Iinventory[nbparamT1*(kkI-1)+thvn+3]<-Iinventory[nbparamT1*(kkI-1)+thvn+1]*Iinventory[nbparamUAZ*(kkI-1)+indexlagI+3]
names(Iinventory)[nbparamT1*(kkI-1)+thvn+3]<-paste0("chI",names(iodinel2)[kkI])
# And the standard error
Iinventory[nbparamT1*(kkI-1)+thvn+4]<-Iinventory[nbparamT1*(kkI-1)+thvn+3] * sqrt((Iinventory[nbparamT1*(kkI-1)+thvn+2]/Iinventory[nbparamT1*(kkI-1)+thvn+1])^2+(Iinventory[nbparamUAZ*(kkI-1)+indexlagI+4]/Iinventory[nbparamUAZ*(kkI-1)+indexlagI+3])^2)
names(Iinventory)[nbparamT1*(kkI-1)+thvn+4]<-paste0("se.chI",names(iodinel2)[kkI])
}
# Year alignment lag
minyearSr<-as.numeric(names(strontiuml2)[1])
indexlagSr<-ov+(minyearSr-1988)*4
for (kkSr in 1:length(strontiuml2)) {
Sr.loess<-loess(mean~EASTING+NORTHING, data=strontiuml2[[kkSr]],degree=1,span=alphaloessconc)
predSr<-predict(Sr.loess,newdata = testgrid1 ,se = TRUE)
dimpredictions<-dim(predSr$fit)
fullfit<-as.vector(predSr$fit)
#Remove negative values as we will just consider them NULL
nbnegSrvals[kkSr]<-sum(fullfit<0, na.rm=TRUE)
fullfit[fullfit<0]<-NA
nbNASrvals[kkSr]<-sum(is.na(fullfit))
#fullfit[fullfit<0]<-0
#Store in Tyear
Srinventory[nbparamT1*(kkSr-1)+thvn+1]<-fullfit
names(Srinventory)[nbparamT1*(kkSr-1)+thvn+1]<-paste0("Sr",names(strontiuml2)[kkSr])
Srinventory[nbparamT1*(kkSr-1)+thvn+2]<-as.vector(predSr$se.fit)
names(Srinventory)[nbparamT1*(kkSr-1)+thvn+2]<-paste0("se.Sr",names(strontiuml2)[kkSr])
# Compute C*e
Srinventory[nbparamT1*(kkSr-1)+thvn+3]<-Srinventory[nbparamT1*(kkSr-1)+thvn+1]*Srinventory[nbparamUAZ*(kkSr-1)+indexlagSr+3]
names(Srinventory)[nbparamT1*(kkSr-1)+thvn+3]<-paste0("chSr",names(strontiuml2)[kkSr])
# And the standard error
Srinventory[nbparamT1*(kkSr-1)+thvn+4]<-Srinventory[nbparamT1*(kkSr-1)+thvn+3] * sqrt((Srinventory[nbparamT1*(kkSr-1)+thvn+2]/Srinventory[nbparamT1*(kkSr-1)+thvn+1])^2+(Srinventory[nbparamUAZ*(kkSr-1)+indexlagSr+4]/Srinventory[nbparamUAZ*(kkSr-1)+indexlagSr+3])^2)
names(Srinventory)[nbparamT1*(kkSr-1)+thvn+4]<-paste0("se.chSr",names(strontiuml2)[kkSr])
}
minyearCs<-as.numeric(names(cesium137l2)[1])
indexlagCs<-ov+(minyearSr-1988)*4
for (kkCs in 1:length(cesium137l2)) {
Cs.loess<-loess(mean~EASTING+NORTHING, data=cesium137l2[[kkCs]],degree=1,span=alphaloessconc)
predCs<-predict(Cs.loess,newdata = testgrid1 ,se = TRUE)
#The prediction is given as a matrix, convert to vector
dimpredictions<-dim(predCs$fit)
fullfit<-as.vector(predCs$fit)
#Remove negative values as we will just consider them NULL
nbnegCsvals[kkCs]<-sum(fullfit<0, na.rm=TRUE)
fullfit[fullfit<0]<-NA
nbNACsvals[kkCs]<-sum(is.na(fullfit))
#fullfit[fullfit<0]<-0
#Store in Tyear
Csinventory[nbparamT1*(kkCs-1)+thvn+1]<-fullfit
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+1]<-paste0("Cs",names(cesium137l2)[kkCs])
Csinventory[nbparamT1*(kkCs-1)+thvn+2]<-as.vector(predCs$se.fit)
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+2]<-paste0("se.Cs",names(cesium137l2)[kkCs])
# Compute C*e
Csinventory[nbparamT1*(kkCs-1)+thvn+3]<-Csinventory[nbparamT1*(kkCs-1)+thvn+1]*Csinventory[nbparamUAZ*(kkCs-1)+indexlagCs+3]
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+3]<-paste0("chCs",names(cesium137l2)[kkCs])
# And the standard error
Csinventory[nbparamT1*(kkCs-1)+thvn+4]<-Csinventory[nbparamT1*(kkCs-1)+thvn+3] * sqrt((Csinventory[nbparamT1*(kkCs-1)+thvn+2]/Csinventory[nbparamT1*(kkCs-1)+thvn+1])^2+(Csinventory[nbparamUAZ*(kkCs-1)+indexlagCs+4]/Csinventory[nbparamUAZ*(kkCs-1)+indexlagCs+3])^2)
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+4]<-paste0("se.chCs",names(cesium137l2)[kkCs])
}
names(cesium137l2)
cesium137l2['1989']
cesium137l2['1990']
cesium137l2['1991']
Csinventory<-thicknessUAZ
nbnegCsvals<-vector(mode = "integer", length = length(cesium137l2));
nbNACsvals<-vector(mode = "integer", length = length(cesium137l2));
for (kkCs in 1:length(cesium137l2)) {
print(names(cesium137l2)[kkCs])
Cs.loess<-loess(mean~EASTING+NORTHING, data=cesium137l2[[kkCs]],degree=1,span=alphaloessconc)
predCs<-predict(Cs.loess,newdata = testgrid1 ,se = TRUE)
#The prediction is given as a matrix, convert to vector
dimpredictions<-dim(predCs$fit)
fullfit<-as.vector(predCs$fit)
#Remove negative values as we will just consider them NULL
nbnegCsvals[kkCs]<-sum(fullfit<0, na.rm=TRUE)
fullfit[fullfit<0]<-NA
nbNACsvals[kkCs]<-sum(is.na(fullfit))
#fullfit[fullfit<0]<-0
#Store in Tyear
Csinventory[nbparamT1*(kkCs-1)+thvn+1]<-fullfit
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+1]<-paste0("Cs",names(cesium137l2)[kkCs])
Csinventory[nbparamT1*(kkCs-1)+thvn+2]<-as.vector(predCs$se.fit)
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+2]<-paste0("se.Cs",names(cesium137l2)[kkCs])
# Compute C*e
Csinventory[nbparamT1*(kkCs-1)+thvn+3]<-Csinventory[nbparamT1*(kkCs-1)+thvn+1]*Csinventory[nbparamUAZ*(kkCs-1)+indexlagCs+3]
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+3]<-paste0("chCs",names(cesium137l2)[kkCs])
# And the standard error
Csinventory[nbparamT1*(kkCs-1)+thvn+4]<-Csinventory[nbparamT1*(kkCs-1)+thvn+3] * sqrt((Csinventory[nbparamT1*(kkCs-1)+thvn+2]/Csinventory[nbparamT1*(kkCs-1)+thvn+1])^2+(Csinventory[nbparamUAZ*(kkCs-1)+indexlagCs+4]/Csinventory[nbparamUAZ*(kkCs-1)+indexlagCs+3])^2)
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+4]<-paste0("se.chCs",names(cesium137l2)[kkCs])
}
Csinventory<-thicknessUAZ
nbnegCsvals<-vector(mode = "integer", length = length(cesium137l2));
nbNACsvals<-vector(mode = "integer", length = length(cesium137l2));
for (kkCs in 1:length(cesium137l2)) {
Cs.loess<-loess(mean~EASTING+NORTHING, data=cesium137l2[[kkCs]],degree=1,span=alphaloessconc)
predCs<-predict(Cs.loess,newdata = testgrid1 ,se = TRUE)
#The prediction is given as a matrix, convert to vector
dimpredictions<-dim(predCs$fit)
fullfit<-as.vector(predCs$fit)
#Remove negative values as we will just consider them NULL
nbnegCsvals[kkCs]<-sum(fullfit<0, na.rm=TRUE)
fullfit[fullfit<0]<-NA
nbNACsvals[kkCs]<-sum(is.na(fullfit))
#fullfit[fullfit<0]<-0
#Store in Tyear
Csinventory[nbparamT1*(kkCs-1)+thvn+1]<-fullfit
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+1]<-paste0("Cs",names(cesium137l2)[kkCs])
Csinventory[nbparamT1*(kkCs-1)+thvn+2]<-as.vector(predCs$se.fit)
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+2]<-paste0("se.Cs",names(cesium137l2)[kkCs])
# Compute C*e
Csinventory[nbparamT1*(kkCs-1)+thvn+3]<-Csinventory[nbparamT1*(kkCs-1)+thvn+1]*Csinventory[nbparamUAZ*(kkCs-1)+indexlagCs+3]
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+3]<-paste0("chCs",names(cesium137l2)[kkCs])
# And the standard error
Csinventory[nbparamT1*(kkCs-1)+thvn+4]<-Csinventory[nbparamT1*(kkCs-1)+thvn+3] * sqrt((Csinventory[nbparamT1*(kkCs-1)+thvn+2]/Csinventory[nbparamT1*(kkCs-1)+thvn+1])^2+(Csinventory[nbparamUAZ*(kkCs-1)+indexlagCs+4]/Csinventory[nbparamUAZ*(kkCs-1)+indexlagCs+3])^2)
names(Csinventory)[nbparamT1*(kkCs-1)+thvn+4]<-paste0("se.chCs",names(cesium137l2)[kkCs])
print(names(cesium137l2)[kkCs])
}
kkCs
length(names(cesium137l2))
eps
warnings()
rstudio::viewData(Csinventory)
CSinventory[,[105]]
CSinventory[[105]]
grep("Cs",names(Csinventory))
names(Csinventory)[grep("Cs",names(Csinventory))]
rstudio::viewData(Csinventory[,names(Csinventory)[grep("Cs",names(Csinventory))]])
image.plot(ea.v,no.v,Csinventory$Cs1990)
image(Csinventory$Cs1990)
testCsplot<-Csinventory$Cs1990
dim(testCsplot) <- c(50,60)
image(testCsplot)
image(Csinventory$EASTING,Csinventory$NORTHING,testCsplot)
image(ea.v,no.v,testCsplot)
testCsplot<-Csinventory$Cs1991
dim(testCsplot) <- c(50,60)
image(ea.v,no.v,testCsplot)
length(ea.v)
length(no.v)
testCsplot2<-t(testCsplot)
image(ea.v,no.v,testCsplot2)
image(no.v,ea.v,testCsplot2)
testCsplot[1,]
ploterrorTCCZ<-testgrid1
ploterrorTCCZ$TCCZ.fit<-as.vector(pre3$fit)
ploterrorTCCZ$TCCZ.se.fit<-as.vector(pre3$se.fit)
ploterrorTCCZ$TCCZ.fitb<-pre3b$fit
ploterrorTCCZ$TCCZ.se.fitb<-pre3b$se.fit
ploterrorTCCZ$TCCZ.fitlm<-pre3lm$fit[,1]
ploterrorTCCZ$TCCZ.se.fitlm<-pre3lm$se.fit
ploterrorTCCZ$TCCZ.fitlmupr<-pre3lm$fit[,2]
#Lower Bound 95% prediction interval
ploterrorTCCZ$TCCZ.fitlmlwr<-pre3lm$fit[,3]
require(spatstat)
require(maptools)
require(ggplot2)
require(scales)
help(volcano)
filled.contour(volcano, color.palette = terrain.colors, asp = 1)
head(volcano)
plotTCCZerror <- ggplot(ploterrorTCCZ, aes(x=EASTING,y=NORTHING))
+ geom_tile(aes(fill=TCCZ.fit))
plotTCCZerror <- ggplot(ploterrorTCCZ, aes(x=EASTING,y=NORTHING))
+ geom_tile(data=ploterrorTCCZ,aes(fill=TCCZ.fit))
dim(TCCZ.fit)
dim(ploterrorTCCZ$TCCZ.fit)
length(ploterrorTCCZ$TCCZ.fit)
plotTCCZerror <- ggplot(ploterrorTCCZ, aes(x=EASTING,y=NORTHING, fill=TCCZ.fit))
+ geom_tile()
plotTCCZerror <- ggplot(ploterrorTCCZ, aes(x=EASTING,y=NORTHING, fill=TCCZ.fit)) +
geom_tile()
print(plotTCCZerror)
pf1 <- ggplot(ploterrorTCCZ, aes(x=EASTING,y=NORTHING, fill=TCCZ.fit))
pf1 <- pf1 + geom_tile()
print(pf1)
pf1 <- pf1 + scale_fill_gradient(low="green", high="red")
print(pf1)
pe1 <- ggplot(ploterrorTCCZ, aes(x=EASTING,y=NORTHING, fill=TCCZ.se.fit))
pe1 <- pe1 + geom_tile()
pe1 <- pe1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(pe1)
Cspf1 <- ggplot(Csinventory, aes(x=EASTING,y=NORTHING, fill=Cs1990))
Cspf1 <- Cspf1 + geom_tile()
Cspf1 <- Cspf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Cspf1)
Cspf1 <- ggplot(Csinventory, aes(x=EASTING,y=NORTHING, fill=Cs1991))
Cspf1 <- Cspf1 + geom_tile()
Cspf1 <- Cspf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Cspf1)
Cspf1 <- ggplot(Csinventory, aes(x=EASTING,y=NORTHING, fill=Cs1995))
Cspf1 <- Cspf1 + geom_tile()
Cspf1 <- Cspf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Cspf1)
Cspf1 <- ggplot(Csinventory, aes(x=EASTING,y=NORTHING, fill=Cs1996))
Cspf1 <- Cspf1 + geom_tile()
Cspf1 <- Cspf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Cspf1)
Cspf1 <- ggplot(Csinventory, aes(x=EASTING,y=NORTHING, fill=Cs1997))
Cspf1 <- Cspf1 + geom_tile()
Cspf1 <- Cspf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Cspf1)
Cspf1 <- ggplot(Csinventory, aes(x=EASTING,y=NORTHING, fill=Cs1998))
Cspf1 <- Cspf1 + geom_tile()
Cspf1 <- Cspf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Cspf1)
Cspf1 <- ggplot(Csinventory, aes(x=EASTING,y=NORTHING, fill=Cs1999))
Cspf1 <- Cspf1 + geom_tile()
Cspf1 <- Cspf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Cspf1)
Srpf1 <- ggplot(Srinventory, aes(x=EASTING,y=NORTHING, fill=Sr1999))
Srpf1 <- Srpf1 + geom_tile()
Srpf1 <- Srpf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Srpf1)
Srpf1 <- ggplot(Srinventory, aes(x=EASTING,y=NORTHING, fill=Sr1997))
Srpf1 <- Srpf1 + geom_tile()
Srpf1 <- Srpf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Srpf1)
Srpf1 <- ggplot(Srinventory, aes(x=EASTING,y=NORTHING, fill=Sr1999))
Srpf1 <- Srpf1 + geom_tile()
Srpf1 <- Srpf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Srpf1)
Srpf1 <- ggplot(Srinventory, aes(x=EASTING,y=NORTHING, fill=Sr2000))
Srpf1 <- Srpf1 + geom_tile()
Srpf1 <- Srpf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Srpf1)
Srpf1 <- ggplot(Srinventory, aes(x=EASTING,y=NORTHING, fill=Sr2001))
Srpf1 <- Srpf1 + geom_tile()
Srpf1 <- Srpf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Srpf1)
Srpf1 <- ggplot(Srinventory, aes(x=EASTING,y=NORTHING, fill=Sr2002))
Srpf1 <- Srpf1 + geom_tile()
Srpf1 <- Srpf1 + scale_fill_gradient(low="green", high="red")
# + geom_point(data=TCCZe, coulour= "black" , size = 4)
print(Srpf1)
library(animation)
setwd("D:/CodeProjects/srs_work/inventory")
require(plyr)
require(ggplot2)
require(splancs)
news(Version == "0.9.3.1", package = "ggplot2")
install.packages(c("biglm", "caret", "corpcor", "diagram", "multcomp", "plotKML", "ROCR", "sos4R", "trip"))
install.packages("ape")
source('../inventory/functions.R')
source('../inventory/interpolation_domain.R')
source('../inventory/aquifer_comp.R')
nitrateFAW5<-read.csv("../FAW5/nitrate_FAW5.csv",header = TRUE)
names(nitrateFAW5)<-c("nitratemgl","delta.elev","depth.from.wt")
require(ggplot2)
setwd("D:/CodeProjects/srs_work/inventory")
require(ggplot2)
nitrateFAW5<-readRDS("../FAW5/nitrateFAW5.rdata")
gg<-ggplot(data=nitrateFAW5,aes(x=nitratemgl))
gg<-gg+geom_line(aes(y=depth.from.wt), colour="#000099",size=3)
gg<-gg+scale_y_reverse()
gg<-gg+ theme_bw()
gg<-gg+ theme(plot.title=element_text(face="bold", colour="#000000", size=30))
gg<-gg+ theme(axis.title.x = element_text(face="bold", colour="#000000", size=26))
gg<-gg+ theme(axis.title.y = element_text(face="bold", colour="#000000", lineheight=1 , size=26))
gg<-gg+ theme(axis.text.x  = element_text(size=22))
gg<-gg+ theme(axis.text.y  = element_text(size=22))
gg<-gg+ labs(title="Nitrate profile at well FAW5 \n",x="Nitrate (mg/L)", y="Depth from water table (m) \n")
gg<-gg+ geom_rect(aes(xmin=1,xmax=799,ymin=9.8,ymax=11),fill="grey", alpha=0.2)
gg<-gg+ annotate("text", x = 400, y = 10.4, label = "Tan Clay Confining Zone", size=10)
print(gg)
gg<-ggplot(data=nitrateFAW5,aes(x=nitratemgl))
gg<-gg+geom_points(aes(y=depth.from.wt), colour="#000099",size=3)
gg<-gg+scale_y_reverse()
gg<-gg+ theme_bw()
gg<-gg+ theme(plot.title=element_text(face="bold", colour="#000000", size=30))
gg<-gg+ theme(axis.title.x = element_text(face="bold", colour="#000000", size=26))
gg<-gg+ theme(axis.title.y = element_text(face="bold", colour="#000000", lineheight=1 , size=26))
gg<-gg+ theme(axis.text.x  = element_text(size=22))
gg<-gg+ theme(axis.text.y  = element_text(size=22))
gg<-gg+ labs(title="Nitrate profile at well FAW5 \n",x="Nitrate (mg/L)", y="Depth from water table (m) \n")
gg<-gg+ geom_rect(aes(xmin=1,xmax=799,ymin=9.8,ymax=11),fill="grey", alpha=0.2)
gg<-gg+ annotate("text", x = 400, y = 10.4, label = "Tan Clay Confining Zone", size=10)
print(gg)
gg<-ggplot(data=nitrateFAW5,aes(x=nitratemgl))
gg<-gg+geom_line(aes(y=depth.from.wt), colour="#000099",size=3)
gg<-gg+scale_y_reverse()
gg<-gg+ theme_bw()
gg<-gg+ theme(plot.title=element_text(face="bold", colour="#000000", size=30))
gg<-gg+ theme(axis.title.x = element_text(face="bold", colour="#000000", size=26))
gg<-gg+ theme(axis.title.y = element_text(face="bold", colour="#000000", lineheight=1 , size=26))
gg<-gg+ theme(axis.text.x  = element_text(size=22))
gg<-gg+ theme(axis.text.y  = element_text(size=22))
gg<-gg+ labs(title="Nitrate profile at well FAW5 \n",x="Nitrate (mg/L)", y="Depth from water table (m) \n")
gg<-gg+ geom_rect(aes(xmin=1,xmax=799,ymin=9.8,ymax=11),fill="grey", alpha=0.2)
gg<-gg+ annotate("text", x = 400, y = 10.4, label = "Tan Clay Confining Zone", size=10)
print(gg)
gg2<-ggplot(data=nitrateFAW5,aes(x=nitratemgl))
gg2<-gg2+geom_points(aes(y=depth.from.wt), colour="#000099",size=3)
gg2<-gg2+scale_y_reverse()
gg2<-gg2+ theme_bw()
gg2<-gg2+ theme(plot.title=element_text(face="bold", colour="#000000", size=30))
gg2<-gg2+ theme(axis.title.x = element_text(face="bold", colour="#000000", size=26))
gg2<-gg2+ theme(axis.title.y = element_text(face="bold", colour="#000000", lineheight=1 , size=26))
gg2<-gg2+ theme(axis.text.x  = element_text(size=22))
gg2<-gg2+ theme(axis.text.y  = element_text(size=22))
gg2<-gg2+ labs(title="Nitrate profile at well FAW5 \n",x="Nitrate (mg/L)", y="Depth from water table (m) \n")
gg2<-gg2+ geom_rect(aes(xmin=1,xmax=799,ymin=9.8,ymax=11),fill="grey", alpha=0.2)
gg2<-gg2+ annotate("text", x = 400, y = 10.4, label = "Tan Clay Confining Zone", size=10)
print(gg2)
gg2<-ggplot(data=nitrateFAW5,aes(x=nitratemgl))
gg2<-gg2+geom_point(aes(y=depth.from.wt), colour="#000099",size=3)
gg2<-gg2+scale_y_reverse()
gg2<-gg2+ theme_bw()
gg2<-gg2+ theme(plot.title=element_text(face="bold", colour="#000000", size=30))
gg2<-gg2+ theme(axis.title.x = element_text(face="bold", colour="#000000", size=26))
gg2<-gg2+ theme(axis.title.y = element_text(face="bold", colour="#000000", lineheight=1 , size=26))
gg2<-gg2+ theme(axis.text.x  = element_text(size=22))
gg2<-gg2+ theme(axis.text.y  = element_text(size=22))
gg2<-gg2+ labs(title="Nitrate profile at well FAW5 \n",x="Nitrate (mg/L)", y="Depth from water table (m) \n")
gg2<-gg2+ geom_rect(aes(xmin=1,xmax=799,ymin=9.8,ymax=11),fill="grey", alpha=0.2)
gg2<-gg2+ annotate("text", x = 400, y = 10.4, label = "Tan Clay Confining Zone", size=10)
print(gg2)
gg2<-ggplot(data=nitrateFAW5,aes(x=nitratemgl))
gg2<-gg2+geom_point(aes(y=depth.from.wt), colour="#000099",size=5)
gg2<-gg2+scale_y_reverse()
gg2<-gg2+ theme_bw()
gg2<-gg2+ theme(plot.title=element_text(face="bold", colour="#000000", size=30))
gg2<-gg2+ theme(axis.title.x = element_text(face="bold", colour="#000000", size=26))
gg2<-gg2+ theme(axis.title.y = element_text(face="bold", colour="#000000", lineheight=1 , size=26))
gg2<-gg2+ theme(axis.text.x  = element_text(size=22))
gg2<-gg2+ theme(axis.text.y  = element_text(size=22))
gg2<-gg2+ labs(title="Nitrate profile at well FAW5 \n",x="Nitrate (mg/L)", y="Depth from water table (m) \n")
gg2<-gg2+ geom_rect(aes(xmin=1,xmax=799,ymin=9.8,ymax=11),fill="grey", alpha=0.2)
gg2<-gg2+ annotate("text", x = 400, y = 10.4, label = "Tan Clay Confining Zone", size=10)
print(gg2)
?geom_point
require(plyr)
require(ggplot2)
require(splancs)
source('../inventory/functions.R')
source('../inventory/interpolation_domain.R')
source('../inventory/aquifer_comp.R')
source('../inventory/functions.R')
source('../inventory/interpolation_domain.R')
# Compute the aquifer thickness on an average and per year basis
source('../inventory/aquifer_comp.R')
source('../inventory/interpolation_domain.R')
source('../interpolation_domains/interpolation_domain.R')
# Compute the aquifer thickness on an average and per year basis
source('../inventory/aquifer_comp.R')
# Compute the inventory for tritium
ptm1<-proc.time()
source('../inventory/tritium_comp.R')
print(proc.time()-ptm1)
?paste0
setwd("D:/CodeProjects/srs_work/graphs")
source('../basin_coords/basin_poly.R')
#Import picks for the TCCZ
TCCZe<-readRDS("../TCCZ_krig/TCCZ/TCCZ_o.rdata")
TCCZbasinsmap<-ggplot(basins27poly, aes(x=EASTING, y=NORTHING)) +
geom_polygon(aes(group=id), fill="light grey", colour = "blue", alpha = 1/3) +
scale_fill_discrete("Key") +
labs(list(title = "Plot of the basins with boreholes with TCCZ picks", x = "UTM Easting (m)", y = "UTM Northing (m)"))
TCCZbasinsmap<- TCCZbasinsmap + geom_point(data=TCCZe, aes(x=EASTING, y=NORTHING))
print(TCCZbasinsmap)
require(ggplot2)
TCCZbasinsmap<-ggplot(basins27poly, aes(x=EASTING, y=NORTHING)) +
geom_polygon(aes(group=id), fill="light grey", colour = "blue", alpha = 1/3) +
scale_fill_discrete("Key") +
labs(list(title = "Plot of the basins with boreholes with TCCZ picks", x = "UTM Easting (m)", y = "UTM Northing (m)"))
TCCZbasinsmap<- TCCZbasinsmap + geom_point(data=TCCZe, aes(x=EASTING, y=NORTHING))
print(TCCZbasinsmap)
no.min<-3680930
no.max<-3682110
ea.min<-436175
ea.max<-437155
ea.b<-1+(ea.max-ea.min)/break.size.ea
no.b<-1+(no.max-no.min)/break.size.no
#Create the vectors
ea.v<-seq(ea.min, ea.max, length = ea.b)
no.v<-seq(no.min, no.max, length = no.b)
break.size<-20;
break.size.ea<-break.size
break.size.no<-break.size
#Boundaries of the rectangular domain
no.min<-3680930
no.max<-3682110
ea.min<-436175
ea.max<-437155
#number of breaks ~ 20 m apart
ea.b<-1+(ea.max-ea.min)/break.size.ea
no.b<-1+(no.max-no.min)/break.size.no
#Create the vectors
ea.v<-seq(ea.min, ea.max, length = ea.b)
no.v<-seq(no.min, no.max, length = no.b)
#Create the expandgrid df for predictions
testgrid1<-expand.grid(EASTING=ea.v, NORTHING=no.v)
d.ea<-c(ea.min,ea.min,ea.max,ea.max,ea.min)
d.no<-c(no.min,no.max,no.max,no.min,no.min)
pp<-cbind(d.ea,d.no)
interp.dom<-as.data.frame(pp)
interp.dom2<-interp.dom
TCCZbasinsmap2<- TCCZbasinsmap + geom_polygon(data=interp.dom2, fill="light grey", colour = "orange", alpha=0)
print(TCCZbasinsmap2)
rstudio::viewData(interp.dom)
names(interp.dom2)<-c("EASTING","NORTHING")
TCCZbasinsmap2<- TCCZbasinsmap + geom_polygon(data=interp.dom2, fill="light grey", colour = "orange", alpha=0)
print(TCCZbasinsmap2)
TCCZbasinsmap<-ggplot(basins27poly, aes(x=EASTING, y=NORTHING)) +
geom_polygon(aes(group=id), fill="light grey", colour = "blue", alpha = 1/3) +
scale_fill_discrete("Key") +
theme_bw() +
labs(list(title = "Plot of the basins with boreholes with TCCZ picks", x = "UTM Easting (m)", y = "UTM Northing (m)"))
TCCZbasinsmap<- TCCZbasinsmap + geom_point(data=TCCZe, aes(x=EASTING, y=NORTHING))
TCCZbasinsmap2<- TCCZbasinsmap + geom_polygon(data=interp.dom2, fill="light grey", colour = "orange", alpha=0)
print(TCCZbasinsmap)
print(TCCZbasinsmap2)
rstudio::saveHistory("D:/CodeProjects/srs_work/session_history/20130608.txt")
